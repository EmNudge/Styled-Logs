const parseRegex=a=>b=>{const c=b.match(a);if(!c)return null;const d=Array.from(c);return{str:b.slice(d[0].length),data:d}},parseAll=(...a)=>b=>{let c=b;const d=[];let e=!1;do{e=!1;for(let b=0;b<a.length;b++){const f=a[b],g=f(c);if(null!=g){e=!0,c=g.str,d.push(g.data);break}}}while(e);return d.length?{str:c,data:d}:null},parseMap=(a,b)=>c=>{const d=a(c);return d?{str:d.str,data:b(d.data)}:null},collapseWhitespace=a=>a.replace(/\s+/g," ").replace(/ +(<[^>]+?>) +/," $1"),REGEX={TAG_ATTRIBUTES:/([a-zA-Z-]+?) *= *(?:('|")(.+)\2|(\S+))/g,UNTIL_TAG:/^.+?(?=<[a-zA-Z]|$)/s,TAG:/^<([a-zA-Z\-]+) *([^>]+?)?>(.+?)<\/\1>/s,SELF_CLOSING_TAG:/^<([a-zA-Z-]+) *(.+?)?\/>/,BLOCK:/\s*(.+?)\s*{\s*(.+?)\s*}/sg,NAME_DELIMITER:/\s*,\s*/,RULE:/([a-zA-Z-]+)\s*:\s*(.+?)(?:;|$)/sg},getAttributes=a=>{const b={};if(!a)return b;for(const c of a.matchAll(REGEX.TAG_ATTRIBUTES)){const[,a,,d,e]=c;b[a]=null!==d&&void 0!==d?d:e}return b};var NodeType;(function(a){a.TEXT="TEXT",a.TAG="TAG",a.SELF_CLOSING_TAG="SELF_CLOSING_TAG"})(NodeType||(NodeType={}));const parseHtml=a=>{const b=parseAll(parseMap(parseRegex(REGEX.TAG),a=>({type:NodeType.TAG,content:{name:a[1],attributes:getAttributes(a[2]),content:collapseWhitespace(a[3])}})),parseMap(parseRegex(REGEX.SELF_CLOSING_TAG),a=>({type:NodeType.SELF_CLOSING_TAG,content:{name:a[1],attributes:a[2]?getAttributes(a[2]):{}}})),parseMap(parseRegex(REGEX.UNTIL_TAG),a=>({type:NodeType.TEXT,content:collapseWhitespace(a[0])}))),c=collapseWhitespace(a.trim()),d=b(c);return d?d.data:[]};function parseCss(a){const b=[];for(const c of a.matchAll(REGEX.BLOCK)){const[,a,d]=c,e=a.split(REGEX.NAME_DELIMITER),f=new Map;for(const a of d.matchAll(REGEX.RULE)){const[b,c]=a.slice(1);f.set(b,c)}b.push({names:e,rules:f})}return b}class StyledLog{constructor(){this.styles=[],this.dom=[],this.logStr="",this.aliases={br:"\n"}}html(a,...b){var c=String.raw;const d=c(a,...b);return this.dom=parseHtml(d),this}css(a,...b){var c=String.raw;const d=c(a,...b);return this.styles=parseCss(d),this}getLog(){const a=[],b=[];for(const c of this.dom){if("TEXT"===c.type){a.push(c.content);continue}const{attributes:d,name:e}=c.content,f=d.class||d.className;if(b.push({name:e,className:f?`.${f}`:null}),"SELF_CLOSING_TAG"===c.type){const b=this.aliases[e],c="function"==typeof b?b(d):d;a.push(`%c${c}%c`);continue}const{content:g}=c.content;a.push(`%c${g}%c`)}const c=[];for(const{name:a,className:d}of b){const b=new Map;for(const{names:c,rules:e}of this.styles){const f=[a,d,a+d];if(c.some(a=>f.includes(a)))for(const[a,c]of e)b.set(a,c)}const e=[...b].map(([a,b])=>`${a}:${b}`).join(";");c.push(e,"")}return[a.join(""),...c]}log(){console.log(...this.getLog())}}export default StyledLog;
